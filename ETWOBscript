local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
getgenv().TeleportCont = false;
local teleportDelay = 1
local portalCounter = 0

local Window = Rayfield:CreateWindow({
   Name = "+1 Money Every Click  -- Exploit",
   LoadingTitle = "BreApple Hub",
   LoadingSubtitle = "by BreApple",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "YoutubeBreAppleHub"
   },
})

local GameTab = Window:CreateTab("üè† Home", nil) -- Title, Image

local ToggleAC = GameTab:CreateToggle({
    Name = "Auto Win",
    CurrentValue = _G.autoWin,
    Flag = "AutoWin", 
    Callback = function()

        _G.autoWin = not _G.autoWin
        
        while _G.autoWin == true do
            local username = game.Players.LocalPlayer.Name
            local currentLevel = game:GetService("Players"):FindFirstChild(username).leaderstats:GetChildren()[1].Value

            for i = currentLevel, 250 do
                if _G.autoWin == true then
                    
                    --local controlLevel = game:GetService("Players"):FindFirstChild(username).leaderstats:GetChildren()[1].Value
                    --if controlLevel + 1 ~= i then
                    --    print ("olmadi")
                    --    print ("i =  ", i)
                    --    print ("controlLevel =  ", controlLevel)
                    --    i = game:GetService("Players"):FindFirstChild(username).leaderstats:GetChildren()[1].Value
                    --    wait()
                    --end

                    local number = i + 1
                    print("i =  ", i)
                    print("number =  ", number)
                    
                    local humanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
                    local playerPosition = humanoidRootPart.Position

                
                    if number < 251 then
                        --print ("we are gonna go  = ",  i)
                        print("sdelam")
                        local targetModel = game:GetService("Workspace").Checkpoints:FindFirstChild(i)
                        local targetPosition = targetModel.Position + Vector3.new(0, 5, 0)

                        humanoidRootPart.CFrame = CFrame.new(targetPosition)
                        wait(0.3)
                        if number % 25 == 0 then
                            portalCounter = fixPortalCount(number)
                            portalCounter = portalCounter + 1
                            print(portalCounter)
                            if portalCounter < 11 then
                                local portalName = bringportalName(portalCounter)
                                print ("portal name = ",  portalName)
                                local portalArea = game:GetService("Workspace").WorldPortals:FindFirstChild(portalName)
                                print ("portal area = ",  portalArea)
                                local portalTouch = portalArea:FindFirstChild("InPortal")
                                --print ("portal touch = ",  portalTouch)
                            
                                humanoidRootPart.CFrame = portalTouch.CFrame
                            end
                            wait(0.3)
                        end
                    else
                        local EndModel = game:GetService("Workspace"):GetChildren()[27]
                        local EndTouch = EndModel:GetChildren()[2]
                        humanoidRootPart.CFrame = EndTouch.CFrame
                        wait(0.3)
                        game:GetService("ReplicatedStorage").Remotes.ToServer.RestartPlayer:FireServer()
                        i = 0
                        wait(0.3)
                    end
                else
                    i = 999 --break
                end
                

            end

            wait(0.3)
        end

   end,
})

function fixPortalCount(levelNumb)
    if levelNumb == 25 then return 0 end
    if levelNumb == 50 then return 1 end
    if levelNumb == 75 then return 2 end
    if levelNumb == 100 then return 3 end
    if levelNumb == 125 then return 4 end
    if levelNumb == 150 then return 5 end
    if levelNumb == 175 then return 6 end
    if levelNumb == 200 then return 7 end
    if levelNumb == 225 then return 8 end
    if levelNumb == 250 then return 9 end
end

function bringportalName(portalVal)
    if portalVal == 1 then return "PlainsCaves" end
    if portalVal == 2 then return "CavesJungle" end
    if portalVal == 3 then return "JungleMountains" end
    if portalVal == 4 then return "MountainsGlaciers" end
    if portalVal == 5 then return "GlaciersSea" end
    if portalVal == 6 then return "SeaCity" end
    if portalVal == 7 then return "CityDesert" end
    if portalVal == 8 then return "DesertSavannah" end
    if portalVal == 9 then return "SavannahForest" end
    if portalVal == 10 then return "ToEnd" end
    
end




local MainTab = Window:CreateTab("üèÉ Player Settings", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

local TeleportTab = Window:CreateTab("üëª Ô∏èTeleport", nil) -- Title, Image


Rayfield:Notify({
   Title = "Script Executed Successfully",
   Content = "have fun",
   Duration = 5,
   Image = nil
})

--INFITINE JUMP
local ToggleIJ = MainTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = _G.infinJump,
    Flag = "Toggle1",
    
    Callback = function(infJump)
        _G.infinJump = not _G.infinJump
        
        if _G.infinJumpStarted == nil then
           _G.infinJumpStarted = true
           
           game.StarterGui:SetCore("SendNotification", {Title="BreApple Hub"; Text="Infinite Jump Activatted!"; Duration=5;})
        
           local plr = game:GetService('Players').LocalPlayer
           local m = plr:GetMouse()
           m.KeyDown:connect(function(k)
               if _G.infinJump then
                   if k:byte() == 32 then
                       humanoid = game:GetService('Players').LocalPlayer.Character:FindFirstChildOfClass('Humanoid')
                       humanoid:ChangeState('Jumping')
                       wait()
                       humanoid:ChangeState('Seated')
                   end
                end
            end)
        end
   end,
})

--FLY UI
local ButtonFLY = MainTab:CreateButton({
   Name = "FLY UI",
   Callback = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/BreApple/RobloxUI/main/flyUIscript"))()
   end,
})


--WALKSPEED
--local Label = MainTab:CreateLabel("‚¨á‚¨á Set Walk Speed ‚¨á‚¨á")
MainSection = MainTab:CreateSection("Set Walks Speed ‚¨á")


local InputWS = MainTab:CreateInput({
   Name = "Type the Walkspeed You Want",
   PlaceholderText = "Type Here",
   RemoveTextAfterFocusLost = false,
   Callback = function(wSpeedNow)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = wSpeedNow
   end,
})


local SliderWS = MainTab:CreateSlider({
   Name = "Walkspeed Slider",
   Range = {0, 500},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed,
   Flag = "Slider1", 
   Callback = function(wsSliderVal)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = wsSliderVal
   end,
})


--local Label = MainTab:CreateLabel("‚¨á‚¨á Set Jump Power ‚¨á‚¨á")
MainSection = MainTab:CreateSection("Set Jump Power ‚¨á")

--JUMP POWER
local InputJP = MainTab:CreateInput({
   Name = "Type the Jump Power You Want",
   PlaceholderText = "Type Here",
   RemoveTextAfterFocusLost = false,
   Callback = function(jPowerNow)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = jPowerNow
   end,
})


local SliderJP = MainTab:CreateSlider({
   Name = "Jump Power Slider",
   Range = {0, 500},
   Increment = 1,
   Suffix = "Jump",
   CurrentValue = game.Players.LocalPlayer.Character.Humanoid.JumpPower,
   Flag = "Slider1", 
   Callback = function(jpSliderVal)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = jpSliderVal
   end,
})


--local Label = MainTab:CreateLabel("‚¨á‚¨á Set Hip Height ‚¨á‚¨á")
MainSection = MainTab:CreateSection("Set Hip Height ‚¨á")


--HIP HEIGHT
local InputHH = MainTab:CreateInput({
   Name = "Type the Hip Height You Want",
   PlaceholderText = "Type Here",
   RemoveTextAfterFocusLost = false,
   Callback = function(hHeightNow)
        game.Players.LocalPlayer.Character.Humanoid.HipHeight = hHeightNow
   end,
})


local SliderHH = MainTab:CreateSlider({
   Name = "Hip Height Slider",
   Range = {0, 100},
   Increment = 1,
   Suffix = "",
   CurrentValue = 2,
   Flag = "Slider1", 
   Callback = function(hhSliderVal)
        game.Players.LocalPlayer.Character.Humanoid.HipHeight = hhSliderVal
   end,
})


--T E L E P O R T TAB
MainSection = TeleportTab:CreateSection("Teleport to Players ‚¨á")

--teleporat to a Player
local InputTP = TeleportTab:CreateInput({
   Name = "Type the Player Name You Want to Teleport",
   PlaceholderText = "Type Here",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)

        print(Text)
        local teleportName = Text
        
        local targetPlyr = game.Players.LocalPlayer.Character
        local teleportTo = game:GetService("Workspace"):FindFirstChild(teleportName):FindFirstChild("HumanoidRootPart")
        
        if TeleportCont == false then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = teleportTo.CFrame
        else
            while TeleportCont == true do
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = teleportTo.CFrame
                wait(teleportDelay)
            end
        end

   end,
})

--teleport Continuously to a Player
local ToggleTP = TeleportTab:CreateToggle({
   Name = "Teleport Continuously",
   CurrentValue = TeleportCont,
   Flag = "Toggle2", 
   Callback = function(Value)
       
       TeleportCont = not TeleportCont
       
   end,
})

--teleport delay
local SliderTP = TeleportTab:CreateSlider({
   Name = "Teleport Delay",
   Range = {1, 100},
   Increment = 1,
   Suffix = "Delay",
   CurrentValue = 1,
   Flag = "Slider2", 
   Callback = function(Value)
        teleportDelay = Value
   end,
})
